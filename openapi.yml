openapi: 3.0.0

servers:
  - url: http://127.0.0.1:8000
    description: Default port

info:
  title: Waterpipe
  version: "0.3"
  contact:
    name: Ask me for your questions
    email: silentium.noxe@gmail.com
  description: |
    Waterpipe is programming tool for integrations and aggregation systems.\
    Golang based scripting allow implement no code solutions for your business.
    
    # Introduction
    This API is documented in OpenAPI format. In this document you will found how to create pipes, nodes and tasks.
    
    # Authentication
    Not implemented yet.
    
    <SecurityDefinitions />

tags:
  - name: api_pipe
    x-displayName: Pipes
    description: |
      Pipe is a queue of nodes where each node is a some logic. \
      Task starting from waterpipe.start node and finalize at waterpipe.final node. \
      Pipe has multiple versions, when you create new task you need to specify version of pipe directly. \
      This API allow for you create pipe and versions for him.
  - name: api_node
    x-displayName: Custom node
    description: |
      Node is a minimal logic, similar for a function in programming language. \
      This API allow for you create nodes and change them.
  - name: api_task
    x-displayName: Task
    description: |
      Task is a payload that passing through pipes. \
      Each node receive task, something do with him and task go to next.

paths:
  "/pipe":
    post:
      tags:
        - api_pipe
      summary: Create new pipe
      operationId: create_pipe
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              required:
                - name
                - namespace
              properties:
                name:
                  type: string
                  description: Name of pipe
                namespace:
                  type: string
                  description: Similar for directories
                description:
                  type: string
                settings:
                  type: object
                  description: Some functional that customize via settings
                  properties:
                    debug:
                      type: boolean
                      description: Switch pipe to debug mode
              example:
                name: Test pipe
                namespace: foo.bar.hello
                description: It's test pipe
                settings:
                  debug: false
      responses:
        200:
          description: Success of creation pipe
          content:
            "application/json":
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
        500:
          description: Internal error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/error"
              examples:
                internal_error:
                  $ref: "#/components/examples/internal_error"
        400:
          description: Invalid request
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/error"
              examples:
                invalid_request:
                  $ref: "#/components/examples/invalid_request"

    get:
      tags:
        - api_pipe
      summary: List pipes
      operationId: list_pipes
      responses:
        200:
          description: List of pipes
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/pipe"

  "/pipe/{id}":
    get:
      tags:
        - api_pipe
      summary: Get one pipe
      operationId: get_pipe
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: Pipe definition
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/pipe"

  "/pipe/{id}/version":
    post:
      tags:
        - api_pipe
      summary: Create new version
      operationId: create_pipe_version
      parameters:
        - name: id
          in: path
          description: Pipe id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        content:
          "application/json":
            schema:
              type: object
              properties:
                qualifier:
                  type: string
                  description: Version name
                nodes:
                  type: array
                  description: |
                    Can't be empty. Must contains minimum two nodes: waterpipe.start and waterpipe.final
                  items:
                    type: object
                    required:
                      - id
                      - type
                    properties:
                      id:
                        type: string
                        format: uuid
                      type:
                        type: string
                        description: Full name of node type (namespace + name)
                      title:
                        type: string
                        description: Summary of node. What he doing
                      args:
                        type: object
                        description: Optional arguments of node
                      position:
                        type: object
                        description: Used only for UI
                        properties:
                          x:
                            type: number
                          y:
                            type: number
                      next:
                        type: string
                        format: uuid
                        description: Id of next node. Null value do not route task to the next node
            examples:
              minimum_pipe:
                $ref: "#/components/examples/minimum_pipe"
      responses:
        200:
          description: Success creation of version. No payload in response
        500:
          description: Internal error
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/error"
              examples:
                internal_error:
                  $ref: "#/components/examples/internal_error"
        400:
          description: Invalid request
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/error"
              examples:
                invalid_request:
                  $ref: "#/components/examples/invalid_request"


components:
  schemas:
    error:
      description: Error reason
      type: object
      properties:
        error:
          type: string
    pipe:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        namespace:
          type: string
          description: Similar for directories
        settings:
          type: object
          properties:
            active:
              type: boolean
              description: If false then a pipe can't process tasks
            debug:
              type: boolean
      example:
        id: 8b1337a7-e5f0-457e-9451-c0ab25daddce
        name: Test pipe
        namespace: foo.bar.hello
        settings:
          active: true
          debug: false

  examples:
    internal_error:
      value:
        error: internal error
    invalid_request:
      value:
        error: validation error - parameter x missed

    minimum_pipe:
      description: Minimum pipe definition that can be created
      value:
        qualifier: v10101
        nodes:
          - id: NODE_A
            type: waterpipe.start
            next: NODE_B
          - id: NODE_B
            type: waterpipe.final
            args:
              final: "inject:NODE_C"
          - id: NODE_C
            type: waterpipe.inject.bool
            args:
              value: true